#--------------------------------------------------------------------
# version: 2.1

# jobs:
#   build:
#     docker:
#       - image: cimg/python:3.12.0  # Use Python 3.12 image
#     parallelism: 4
#     resource_class: large
#     steps:
#       - checkout

#       - run:
#           name: Install pipenv
#           command: pip install pipenv  # Install pipenv if not already installed

#       - run:
#           name: Install dependencies
#           command: pipenv install --dev  # Install all dev dependencies including coverage
#       - run:
#           name: List installed packages
#           command: pipenv run pip list  # This will help confirm if coverage is installed


#       - run:
#           name: Run tests
#           command: |
#             # Glob test files and split them by timings to run in parallel
#             circleci tests glob "test/**/*.py" > test_files.txt
#             circleci tests run --command="cat test_files.txt | xargs echo" --verbose --split-by=timings

#             # Run pytest with coverage and parallelization (pytest-xdist)
#             cat test_files.txt
#             TESTFILES=$(cat test_files.txt)
#             pipenv run coverage run -m pytest -n 8 --maxfail=1 --verbose $TESTFILES --junitxml=test-results/junit.xml

#       # - run:
#       #     name: Generate coverage report
#       #     command: pipenv run coverage xml  # Generates coverage.xml for reporting

#       - store_test_results:
#           path: test-results

#       - store_artifacts:
#           path: test/test/report.html
#---------------------------------execued above----

# version: 2.1

# jobs:
#   build:
#     docker:
#       - image: cimg/python:3.12.0
#     parallelism: 4 
#     resource_class: large
#     steps:
#       - checkout

#       - run:
#           name: Install pipenv
#           command: pip install pipenv

#       - run:
#           name: Install dependencies
#           command: pipenv install --dev  

#       - run:
#           name: Run tests (split by file name)
#           command: |
#             # Split test files across containers
#             pipenv run coverage run -m pytest -n 8 --maxfail=1 --verbose $(circleci tests glob "test/**/*.py" | circleci tests split) --junitxml=test-results/junit.xml

#       - store_test_results:
#           path: test-results

#       - store_artifacts:
#           path: test/test/report.html


version: 2.1

jobs:
  build:
    docker:
      - image: cimg/python:3.12.0  # Python 3.12 image
    parallelism: 4  # Run 4 parallel jobs
    resource_class: large
    steps:
      - checkout

      - run:
          name: Install pipenv
          command: pip install pipenv

      - run:
          name: Install dependencies
          command: pipenv install --dev

      - run:
          name: Run tests with proper splitting
          command: |
            # Collect all test files
            circleci tests glob "test/**/*.py" > test_files.txt

            # Properly split the test files across the 4 parallel jobs
            TESTFILES=$(circleci tests split test_files.txt)

            # Run pytest only on the test files assigned to this job
            pipenv run coverage run -m pytest -n 8 --maxfail=1 --verbose $TESTFILES --junitxml=test-results/junit.xml

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test/test/report.html
